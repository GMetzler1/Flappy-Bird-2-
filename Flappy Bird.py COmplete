import pygame
import random
pygame.init()

flap_sound = pygame.mixer.Sound('C:/Users/grayd/Desktop/fun/Duck Quack - Sound Effect (HD).mp3')  # Replace 'path_to_flap_sound.wav' with the actual path to your flap sound file
collision_sound = pygame.mixer.Sound('C:/Users/grayd/Desktop/fun/Bone Cracking sound effect.mp3')  # Replace 'path_to_collision_sound.wav' with the actual path to your collision sound file

window_size = (800, 600)

start_screen_bg = pygame.image.load('C:/Users/grayd/Desktop/fun/1_bH67t1CVqzRKrBmeY8UgmA.jpg')
end_screen_bg = pygame.image.load('C:/Users/grayd/Desktop/fun/1_bH67t1CVqzRKrBmeY8UgmA.jpg')

# Scale the images to fit the window size
start_screen_bg = pygame.transform.scale(start_screen_bg, window_size)
end_screen_bg = pygame.transform.scale(end_screen_bg, window_size)




def show_start_screen():
    screen.blit(start_screen_bg, (0, 0))  # Display the start screen background
    title_font = pygame.font.SysFont('Comic Sans MS', 40)
    title_text = title_font.render('Flappy Bird', False, (255, 255, 255))
    screen.blit(title_text, (200, 250))
    pygame.display.flip()

    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
            if event.type == pygame.KEYUP:
                waiting = False

                
def show_game_over_screen(score):
    screen.blit(end_screen_bg, (0, 0))  # Display the end screen background
    game_over_font = pygame.font.SysFont('Comic Sans MS', 40)
    game_over_text = game_over_font.render(f'Game Over! Score: {score}', False, (255, 255, 255))
    screen.blit(game_over_text, (150, 250))
    pygame.display.flip()

    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
            if event.type == pygame.KEYUP:
                waiting = False


pygame.display.set_caption('Graydon Metzler Flappy Bird')
screen = pygame.display.set_mode(window_size)

# *** NEW CODE ***
pipe_width = 50 # width of the pipe visually
pipe_gap = 200 # gap so Flappy Bird can always make it through
pipe_height = random.randint(100, window_size[1] - 100) # randomize the pipe height
pipe_x = window_size[0]  # Starting x-coordinate is edge of the screen

# create and load an upper pipe image
upper_pipe_image = pygame.image.load('C:/Users/grayd/Desktop/fun/PSL.Zacaraev.Photo.webp')  # Make sure to have an image named 'pipe.png' in the same folder
upper_pipe_image = pygame.transform.flip(upper_pipe_image, False, True) # flip the image so it faces the correct direction

# create and load a lower pipe image
lower_pipe_image = pygame.image.load('C:/Users/grayd/Desktop/fun/PSL.Zacaraev.Photo.webp')

# Load background image
bg_image = pygame.image.load('C:/Users/grayd/Desktop/fun/PSL.Zacaraev.Photo.webp')

# scale the background image to fit the game window size
bg_image = pygame.transform.scale(bg_image, (window_size[0], window_size[1]))

# Initialize background positions
bg_x1 = 0
bg_x2 = bg_image.get_width()  # Assume the background image is the same width as the screen

# Scroll speed
bg_scroll_speed = 2

# Initialize the font
pygame.font.init()
myfont = pygame.font.SysFont('Comic Sans MS', 30)

# Create a text surface
text_surface = myfont.render('Score: 0', False, (0, 0, 0))

# Load an image
bird_image = pygame.image.load('C:/Users/grayd/Desktop/fun/PSL.Zacaraev.Photo.webp') # Make sure to have an image named 'bird1.png' in the same folder

# Scale the image
bird_image = pygame.transform.scale(bird_image, (65, 50))

# *** NEW CODE ***
bird_x = 50
bird_y = 50
bird_velocity = 0
flap_power = -15  # This will determine how much the bird will move upwards
gravity = 1 # determines how fast Flappy Bird will fall
score = 0 
# *** NEW CODE ***
bird_rect = pygame.Rect(bird_x, bird_y, 65, 50)  # Assuming the bird image is 100x50 pixels create a rectangle "hitbox" for Flappy Bird

obstacles = []

# Function to generate random obstacles
def generate_obstacle():
    obstacle_image = pygame.image.load('C:/Users/grayd/Desktop/fun/PSL.Zacaraev.Photo.webp')  # Load your obstacle image
    obstacle_image = pygame.transform.scale(obstacle_image, (50, 50))  # Scale the image as needed
    obstacle_x = window_size[0]  # Starting x-coordinate for the obstacle
    obstacle_y = random.randint(50, window_size[1] - 100)  # Randomize the obstacle's y-coordinate
    obstacles.append([obstacle_image, obstacle_x, obstacle_y])  # Add obstacle to the list

show_start_screen()



# A Simple Game Loop
running = True

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
 
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                bird_velocity = flap_power  # Make the bird move upwards
                flap_sound.play()  # Play the flap sound
                  # *** NEW CODE ***
    pipe_x -= 5 # move the pipe closer to the left of the screen
    if pipe_x < -pipe_width:
        # when the pipe reaches the edge of the screen we reset it with random parameters
        score += 1
        pipe_x = window_size[0]
        pipe_height = random.randint(100, window_size[1] - 100)
        

    

    bird_velocity += gravity  # Apply gravity to velocity


    bird_y += bird_velocity  # update bird position based on velocity

    
    # *** NEW CODE ***
    if bird_y >= window_size [1]: # if Flappy Bird's position is greater than or equal to the height of the screen (hits the floor)
        show_game_over_screen(score)
        # we will reset its position and velocity
        bird_y = 50
        bird_velocity = 0
        pipe_x = window_size[0]
        pipe_height = random.randint(100, window_size[1] - 100)
        score = 0
    

    if bird_y <= 0: # if Flappy Bird hits the ceiling (y position is 0)
        # we lock his position at the top of the screen
        bird_y = 0
        bird_velocity = 0
    
    # *** NEW CODE ***
    bg_x1 -= bg_scroll_speed # update background position
    bg_x2 -= bg_scroll_speed

    # *** NEW CODE ***
    if bg_x1 <= -bg_image.get_width(): # reset background position when it's fully off the screen
        bg_x1 = bg_image.get_width()
    if bg_x2 <= -bg_image.get_width():
        bg_x2 = bg_image.get_width()

    # *** NEW CODE ***
    screen.blit(bg_image, (bg_x1, 0)) # paints the background images
    screen.blit(bg_image, (bg_x2, 0))


    # Generate obstacles randomly
    if random.randint(0, 100) < 3:  # Adjust the number for obstacle appearance frequency
        generate_obstacle()

    # Update obstacle positions
    for obstacle in obstacles:
        obstacle[1] -= 5  # Move the obstacle towards the left of the screen
        screen.blit(obstacle[0], (obstacle[1], obstacle[2]))  # Display the obstacle

        # Check for collision with the bird
        obstacle_rect = pygame.Rect(obstacle[1], obstacle[2], obstacle[0].get_width(), obstacle[0].get_height())
        if obstacle_rect.colliderect(bird_rect):
            # Perform actions when there's a collision (e.g., show_game_over_screen(), reset position, etc.)
            collision_sound.play()
            score += 1
            # Reset the obstacle's position or remove it from the list
            obstacles.remove(obstacle)

        if obstacle[1] < -50:  # Remove obstacle when it goes off the screen
            obstacles.remove(obstacle)

    # *** NEW CODE ***
    # this code replaces the previous rectangle pipes code
    upper_pipe_rect = pygame.Rect(pipe_x, 0, pipe_width, pipe_height) # create the upper pipe
    lower_pipe_rect = pygame.Rect(pipe_x, pipe_height + pipe_gap, pipe_width, window_size[0]) # create the lower pipe

     # *** NEW CODE ***
    # scale the upper/lower pipe images so they fit the hitboxes
    upper_pipe_image = pygame.transform.scale(upper_pipe_image, (pipe_width, pipe_height))
    lower_pipe_image = pygame.transform.scale(lower_pipe_image, (pipe_width, pipe_gap + pipe_height))
    
    # *** NEW CODE ***
    # paint the upper/lower pipe images over the rectangle hit boxes
    screen.blit(upper_pipe_image, upper_pipe_rect.topleft)
    screen.blit(lower_pipe_image, lower_pipe_rect.topleft)
    

     # *** NEW CODE ***
    bird_rect.topleft = (bird_x, bird_y) # this will be Flappy Bird's hitbox and must be placed before the blit, notice how it matches the x,y

 
 # *** NEW CODE ***
    screen.blit(bird_image, (bird_x, bird_y)) # this will display our bird at the variable position bird_x and bird_y

    text_surface = myfont.render(f'Score: {score}', False, (255, 255, 255))

     # *** NEW CODE ***
    screen.blit(text_surface, (10, 10)) # distance from the origin (0, 0) in the upper left hand corner

    
    # *** NEW CODE ***
    if bird_rect.colliderect(upper_pipe_rect) or bird_rect.colliderect(lower_pipe_rect): # check for a collision
        collision_sound.play()
        show_game_over_screen(score)
        bird_y = 50
        bird_velocity = 0
        pipe_x = window_size[0]
        pipe_height = random.randint(100, window_size[1] - 100)
        score = 0
    
    pygame.display.flip()  # Update the display

    pygame.time.delay(30)

pygame.quit()